services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: travel-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-travelagent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
      POSTGRES_DB: ${POSTGRES_DB:-travelagent}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - travel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-travelagent}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: travel-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend Service (Go + Fiber)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: travel-ai-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      BACKEND_PORT: ${BACKEND_PORT:-8080}
      BACKEND_HOST: ${BACKEND_HOST:-0.0.0.0}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-travelagent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
      POSTGRES_DB: ${POSTGRES_DB:-travelagent}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: ${REDIS_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4-turbo-preview}
      WEATHER_API_KEY: ${WEATHER_API_KEY}
      WEATHER_API_URL: ${WEATHER_API_URL}
      FLIGHT_API_KEY: ${FLIGHT_API_KEY}
      FLIGHT_API_URL: ${FLIGHT_API_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Service (Nuxt 3)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: travel-ai-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NUXT_PUBLIC_API_BASE: http://backend:8080
      NODE_ENV: ${ENVIRONMENT:-development}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - travel-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  travel-network:
    driver: bridge
