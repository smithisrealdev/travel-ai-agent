version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: travel-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-traveldb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - travel_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: travel-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes

  # Backend API (Go/Fiber)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: travel-ai-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-traveldb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # API Keys (from .env)
      WEATHER_API_KEY: ${WEATHER_API_KEY}
      FLIGHT_API_KEY: ${FLIGHT_API_KEY}
      HOTEL_API_KEY: ${HOTEL_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      
      # Server Configuration
      PORT: 8080
      ENV: ${ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel_net
    volumes:
      - ./backend:/app
      - /app/tmp

  # Frontend (Nuxt.js/Vue)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: travel-ai-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Backend API URL
      NUXT_PUBLIC_API_BASE_URL: ${NUXT_PUBLIC_API_BASE_URL:-http://backend:8080}
      BACKEND_URL: http://backend:8080
      
      # Nuxt Configuration
      NODE_ENV: ${NODE_ENV:-development}
      HOST: 0.0.0.0
      PORT: 3000
    depends_on:
      - backend
    networks:
      - travel_net
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.nuxt

networks:
  travel_net:
    driver: bridge
    name: travel_net

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
